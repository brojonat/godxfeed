// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: metadata.sql

package dbgen

import (
	"context"

	jsonb "github.com/brojonat/godxfeed/service/db/jsonb"
)

const getMetadataByIDs = `-- name: GetMetadataByIDs :many
SELECT symbol, data
FROM metadata
WHERE symbol = ANY($1::VARCHAR[])
`

func (q *Queries) GetMetadataByIDs(ctx context.Context, symbols []string) ([]Metadatum, error) {
	rows, err := q.db.Query(ctx, getMetadataByIDs, symbols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metadatum
	for rows.Next() {
		var i Metadatum
		if err := rows.Scan(&i.Symbol, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMetadata = `-- name: InsertMetadata :exec
INSERT INTO metadata (symbol, data)
VALUES ($1, $2)
ON CONFLICT ON CONSTRAINT metadata_pkey DO UPDATE
SET data = EXCLUDED.data
`

type InsertMetadataParams struct {
	Symbol string             `json:"symbol"`
	Data   jsonb.MetadataJSON `json:"data"`
}

func (q *Queries) InsertMetadata(ctx context.Context, arg InsertMetadataParams) error {
	_, err := q.db.Exec(ctx, insertMetadata, arg.Symbol, arg.Data)
	return err
}
